name: Scaffold v2

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  scaffold:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure empty tree (no conflicting prior scaffold)
        run: |
          mkdir -p apps
          # remove partial leftovers to avoid "directory not empty" generator prompts
          rm -rf apps/frontend
          rm -rf apps/functions
          mkdir -p .github/workflows docs

      # ---------- FRONTEND (React+TS via Vite-style layout, non-interactive) ----------
      - name: Create frontend skeleton
        run: |
          mkdir -p apps/frontend/src
          cat > apps/frontend/package.json <<'EOF'
          {
            "name": "@statecvi/frontend",
            "version": "0.1.0",
            "private": true,
            "type": "module",
            "scripts": {
              "dev": "vite",
              "build": "tsc -b && vite build",
              "preview": "vite preview"
            },
            "dependencies": {
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "react-router-dom": "^6.23.0",
              "@azure/msal-browser": "^3.7.0",
              "@azure/msal-react": "^2.0.17",
              "axios": "^1.7.2",
              "react-hook-form": "^7.51.3",
              "yup": "^1.4.0",
              "react-signature-canvas": "^1.0.6"
            },
            "devDependencies": {
              "typescript": "^5.4.5",
              "vite": "^5.2.0",
              "@vitejs/plugin-react": "^4.2.0",
              "@types/react": "^18.2.37",
              "@types/react-dom": "^18.2.15"
            }
          }
          EOF

          cat > apps/frontend/tsconfig.json <<'EOF'
          {
            "compilerOptions": {
              "target": "ES2020",
              "lib": ["ES2020","DOM","DOM.Iterable"],
              "module": "ESNext",
              "moduleResolution": "Bundler",
              "strict": true,
              "resolveJsonModule": true,
              "isolatedModules": true,
              "noEmit": true,
              "jsx": "react-jsx",
              "types": ["vite/client"]
            },
            "include": ["src"]
          }
          EOF

          cat > apps/frontend/vite.config.ts <<'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          export default defineConfig({
            plugins: [react()],
            server: { port: 5173 }
          })
          EOF

          cat > apps/frontend/index.html <<'EOF'
          <!doctype html>
          <html lang="en">
            <head>
              <meta charset="UTF-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <title>statecvi2</title>
            </head>
            <body>
              <div id="root"></div>
              <script type="module" src="/src/main.tsx"></script>
            </body>
          </html>
          EOF

          cat > apps/frontend/src/index.css <<'EOF'
          html, body, #root { height: 100%; margin: 0; font-family: system-ui, sans-serif; }
          a { color: inherit; }
          EOF

          cat > apps/frontend/src/auth.msalConfig.ts <<'EOF'
          import { Configuration, LogLevel } from "@azure/msal-browser";
          export const msalConfig: Configuration = {
            auth: {
              clientId: import.meta.env.VITE_B2C_CLIENT_ID || "REPLACE_ME",
              authority: `https://${import.meta.env.VITE_B2C_TENANT}.b2clogin.com/${import.meta.env.VITE_B2C_TENANT}.onmicrosoft.com/${import.meta.env.VITE_B2C_POLICY}`,
              knownAuthorities: [`${import.meta.env.VITE_B2C_TENANT}.b2clogin.com`],
              redirectUri: import.meta.env.VITE_REDIRECT_URI || "http://localhost:5173"
            },
            cache: { cacheLocation: "localStorage", storeAuthStateInCookie: false },
            system: { loggerOptions: { logLevel: LogLevel.Warning } }
          };
          export const apiScopes = [import.meta.env.VITE_B2C_API_SCOPE || ""];
          EOF

          cat > apps/frontend/src/main.tsx <<'EOF'
          import React from 'react'
          import ReactDOM from 'react-dom/client'
          import { BrowserRouter, Routes, Route, Navigate, Link } from 'react-router-dom'
          import './index.css'

          function Home() {
            return (
              <div style={{padding: 24}}>
                <h2>statecvi2 â€” MVP scaffold</h2>
                <p>Front end is up. Configure B2C and API base URL next.</p>
                <ul>
                  <li><Link to="/vet">Vet Portal</Link></li>
                  <li><Link to="/owner">Owner Portal</Link></li>
                </ul>
              </div>
            )
          }
          function VetPortal() { return <div style={{padding: 24}}><h3>Vet Portal</h3></div> }
          function OwnerPortal() { return <div style={{padding: 24}}><h3>Owner Portal</h3></div> }

          function App() {
            return (
              <Routes>
                <Route path="/" element={<Home />} />
                <Route path="/vet/*" element={<VetPortal />} />
                <Route path="/owner/*" element={<OwnerPortal />} />
                <Route path="*" element={<Navigate to="/" replace />} />
              </Routes>
            )
          }

          ReactDOM.createRoot(document.getElementById('root')!).render(
            <React.StrictMode>
              <BrowserRouter><App /></BrowserRouter>
            </React.StrictMode>
          )
          EOF

          cat > apps/frontend/.env.example <<'EOF'
          VITE_API_BASE=http://localhost:7071/api
          VITE_B2C_TENANT=yourtenant
          VITE_B2C_CLIENT_ID=your-spa-client-id
          VITE_B2C_POLICY=B2C_1_signup_signin
          VITE_B2C_API_SCOPE=api://your-api-app-id/access
          VITE_REDIRECT_URI=http://localhost:5173
          EOF

      # ---------- BACKEND (Azure Functions + TS) ----------
      - name: Create functions skeleton
        run: |
          mkdir -p apps/functions/src/functions/CreateCvi apps/functions/src/functions/GetStateRequirements
          cat > apps/functions/package.json <<'EOF'
          {
            "name": "@statecvi/functions",
            "version": "0.1.0",
            "type": "commonjs",
            "scripts": {
              "build": "tsc -p tsconfig.json",
              "start": "func start",
              "start:watch": "tsc -w & func start"
            },
            "dependencies": {
              "@azure/cosmos": "^3.18.0",
              "@azure/functions": "^4.4.0",
              "axios": "^1.7.2",
              "pdf-lib": "^1.17.1",
              "xmlbuilder2": "^3.1.1"
            },
            "devDependencies": {
              "@types/node": "^20.8.10",
              "typescript": "^5.4.5"
            }
          }
          EOF

          cat > apps/functions/tsconfig.json <<'EOF'
          {
            "compilerOptions": {
              "target": "ES2020",
              "module": "commonjs",
              "lib": ["ES2020"],
              "outDir": "dist",
              "rootDir": "src",
              "strict": true,
              "esModuleInterop": true,
              "resolveJsonModule": true
            },
            "include": ["src"]
          }
          EOF

          cat > apps/functions/host.json <<'EOF'
          {
            "version": "2.0",
            "extensionBundle": { "id": "Microsoft.Azure.Functions.ExtensionBundle", "version": "[3.*, 4.0.0)" }
          }
          EOF

          cat > apps/functions/src/functions/CreateCvi/function.json <<'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "methods": [ "post" ],
                "route": "vets/{vetId}/cvis"
              },
              { "type": "http", "direction": "out", "name": "res" }
            ]
          }
          EOF

          cat > apps/functions/src/functions/CreateCvi/index.ts <<'EOF'
          import { AzureFunction, Context, HttpRequest } from "@azure/functions";
          const httpTrigger: AzureFunction = async function (context: Context, req: HttpRequest): Promise<void> {
            const vetId = context.bindingData.vetId;
            const body = req.body || {};
            context.res = { status: 201, jsonBody: { message: "CVI draft created (stub)", vetId, received: body } };
          };
          export default httpTrigger;
          EOF

          cat > apps/functions/src/functions/GetStateRequirements/function.json <<'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "methods": [ "get" ],
                "route": "stateRequirements/{state}"
              },
              { "type": "http", "direction": "out", "name": "res" }
            ]
          }
          EOF

          cat > apps/functions/src/functions/GetStateRequirements/index.ts <<'EOF'
          import { AzureFunction, Context, HttpRequest } from "@azure/functions";
          const httpTrigger: AzureFunction = async function (context: Context, req: HttpRequest): Promise<void> {
            const state = (context.bindingData.state || "").toUpperCase();
            context.res = { status: 200, jsonBody: { state, requirements: [], lastUpdated: null } };
          };
          export default httpTrigger;
          EOF

      # ---------- CI workflow (build both apps) ----------
      - name: Add CI workflow
        run: |
          cat > .github/workflows/ci.yml <<'EOF'
          name: CI
          on:
            push: { branches: [ main ] }
            pull_request:
          jobs:
            build-frontend:
              runs-on: ubuntu-latest
              defaults: { run: { working-directory: apps/frontend } }
              steps:
                - uses: actions/checkout@v4
                - uses: actions/setup-node@v4
                  with: { node-version: '20' }
                - run: npm install
                - run: npm run build
            build-functions:
              runs-on: ubuntu-latest
              defaults: { run: { working-directory: apps/functions } }
              steps:
                - uses: actions/checkout@v4
                - uses: actions/setup-node@v4
                  with: { node-version: '20' }
                - run: npm install
                - run: npm run build
          EOF

      - name: Root README
        run: |
          cat > README.md <<'EOF'
          # statecvi2

          Monorepo scaffold:
          - apps/frontend: React + TypeScript (Vite-style)
          - apps/functions: Azure Functions + TypeScript
          - .github/workflows: CI and scaffold

          ## Quickstart (local)
          1) Frontend
             cd apps/frontend
             cp .env.example .env
             npm install
             npm run dev
          2) Backend
             cd apps/functions
             npm install
             # install Azure Functions Core Tools locally for `func start`
             npm run build
             # func start
          3) Configure Azure AD B2C + Cosmos + Azure Functions later.

          ## Next
          - Wire Cosmos SDK in functions
          - Implement schema-true XML/PDF generation
          - Secure endpoints with B2C (EasyAuth) + CORS
          EOF

      # ---------- Open PR ----------
      - name: Create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "Scaffold v2: React + Azure Functions skeleton"
          title: "Scaffold v2: initial project structure"
          body: "Auto-generated skeleton for statecvi2 (frontend + backend + CI)."
          branch: scaffold/initial-v2
